
/* Redefinindo a margem, pois alguns navegadores têm sua própria margem definida */
body {
    font-family: Helvetica;
    margin: 0 auto;
}

.zone {
    
    color:#FFF;
    font-size:2em;
    border-radius:4px;
    transition: all 0.3s linear;
}

.zone:hover {
    -webkit-box-shadow:rgba(0,0,0,0.8) 0px 5px 15px, inset rgba(0,0,0,0.15) 0px -10px 20px;
    -moz-box-shadow:rgba(0,0,0,0.8) 0px 5px 15px, inset rgba(0,0,0,0.15) 0px -10px 20px;
    -o-box-shadow:rgba(0,0,0,0.8) 0px 5px 15px, inset rgba(0,0,0,0.15) 0px -10px 20px;
    box-shadow:rgba(0,0,0,0.8) 0px 5px 15px, inset rgba(0,0,0,0.15) 0px -10px 20px;
}


.main-nav {
    height: 75px;
    background-color: rgb(27, 26, 26);
    list-style-type: none;
    display: flex;
    border-radius: 5px;
    margin: 0;
}


a:hover {
 background-color: purple;
}

/*
    Ao alterar o tamanho da largura, vemos algum corte de navegação, então precisamos modificar como ficará quando a largura for menor
*/
@media only screen and (max-width: 600px) {
    .main-nav {
        font-size: 0.5em;
        
    }
}

/*
    isso empurra  'contato' totalmente para a direita.
    margin-left auto, cria automaticamente uma margem esquerda máxima para o div
*/
.push {
    margin-left: auto;
    float:right;
}

li {
    
}

a {
    font-size: 35px;
    padding: 20px;
    text-decoration: none;
    margin: 5px;
    position: relative;
    top: 25%;
    color: white;
}

.sticky {
    width: 100%;
    z-index: 1;
    position: fixed;
    top: 0;
}

.container {
/* vh = altura da vista. Fazemos isso para garantir que o banner preencha toda a visualização */
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.cover { 
    width: 100%;
    height: 100%;

}
/*
    Gostaríamos que o texto aparecesse no centro da imagem e acima dela.
 */
.coverText {
    transform: translate(-50%, -50%);
    position: absolute;
    top: 50%;
    left: 50%;
    color: white;
}

.coverText > h1 {
    
}

/***********************************************************************
 *  Body card grid
 **********************************************************************/
/*
    Vamos criar uma grade de blocos, então usaremos a grade desta vez.
    grid-template-columns define o estilo de cada coluna (ou div). FYI: Se definissemos apenas 1fr, veríamos apenas um bloco por coluna.
    Então, configuramos para repetir (assim como digitar 1fr 1fr ...) e preencher automaticamente a tela com qualquer coisa de min 350px a tela inteira (1fr)
    Finalmente, definimos um gap de grade de 20px (padding like)
*/
.grid-wrapper {
    background-color: rgb(27, 26, 26);
    display: grid;
    grid-template-columns: repeat(auto-fill,minmax(350px,1fr));
    gap: 5%;
}

.card {
    padding: 5%;
    margin: 10%;
    background-color:dimgrey;
    width: 100%;
    position: relative;
    display: inline-block;
    border-radius: 10px;
    left: 12%;
}

/*
Queremos garantir que a imagem preencha toda a caixa, portanto, definimos a largura em 100%.
Queremos apenas manipular imagens dentro da caixa de classe.
*/

.card > img {
    width: 100%;
    
}

.card h1 {
    font-size: 50%;
}

.card p {
color: white;
font-size: 25%;
}

/*
    Definimos o preenchimento ao redor do texto dentro do cartão (ao contrário da imagem que deve ser espalhada em 100% da largura)
*/
.card > .text {
    padding: 0 20px 20px;
}

/*
    Por fim, definimos o design do botão que aparece dentro de cada cartão.
 */
button {
    font-size: 30%;
    width: 100%;
    height: 50%;
    align-items: center;
}

button:hover {
    background-color: rgb(63, 63, 221);
    
}

/***********************************************************************
 *  Footer
 **********************************************************************/
footer {
   
    height: 100px;
    background-color:rgb(45, 45, 188);
}

footer p {
    text-align: center;
}

/***********************************************************************
 *  Blue Background
 **********************************************************************/
.blue {

}

